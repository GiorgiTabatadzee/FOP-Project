import java.util.HashMap;
import java.util.Map;

public class Executor {


    private final Map<String, Integer> memory = new HashMap<>();


    public void eval(String program) {

        program = program.trim();
        String[] splittedString = program.split(" ");


    }

    public void handlingAssignment(String[] stringArr) {

        //checking validation of assignment val/var
        String assignment = stringArr[0];
        if (assignment.equals("var") || assignment.equals("val")) {
            String leftOpr = stringArr[1];

            //Edge cases for left Operand
            if (!leftOpr.matches("[a-zA-Z_][a-zA-Z0-9_]*")) {
                throw new IllegalArgumentException("The leftOpt cant be number or start with number");
            }

            //checking if it's the equal operation
            if (!stringArr[2].equals("=")) {
                throw new IllegalArgumentException("Invalid syntax");

            }
            String rightOpt = stringArr[3];

            //checking if right operand contains arithmetic operation
            if (rightOpt.matches("-?\\d+")) {
                int rightNum = Integer.parseInt(rightOpt);
            } else {
                //here ve call method
                int result = evaluateExpression(rightOpt);
            }

            //val is immutable so
            if (assignment.equals("val") && memory.containsKey(leftOpr)) {
                throw new IllegalArgumentException("cannot reassign a val variable " + leftOpr);

            }
            //finally if the right operand is integer
            try {
                int value = Integer.parseInt(rightOpt);
                System.out.println(leftOpr + "=" + value);
                memory.put(leftOpr, value);
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("Invalid value " + rightOpt + "As it is not an integer");
            }


        }


    }

    private int evaluateExpression(String expression) {

        expression = expression.replace(" ", "");

        int operatorIndex = -1;
        char operator = ' ';

        // checking the existence of operator in right operand
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '/' || c == '*' || c == '%' || c == '-' || c == '+') {
                operatorIndex = i;
                operator = c;
                break;
            }


        }
        // if we didn't find any operator
        if (operatorIndex == -1) {
            throw new IllegalArgumentException("The operator was not found");

        }
        //extracting left and right operands of expression
        String leftOperand = expression.substring(0, operatorIndex);
        String rightOperand = expression.substring(operatorIndex + 1);

        // parsing both
        int num1 = Integer.parseInt(leftOperand);
        int num2 = Integer.parseInt(rightOperand);

       /*
        here I made the method calculate which on operations *%+-/ makes appropriate operations on operands
        and after this I handle with try-catch exception which will ensure the code will work without issues
        and propagate to the next step.
        */

        try {
           return calculate(num1, num2, operator);
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
            throw e;
        }
    }

    public int calculate(int num1, int num2, char operator) {
        switch (operator) {
            case '+':
                return num1 + num2;
            case '-':
                return num1 - num2;
            case '%':
                return num1 % num2;
            case '/':
                return num1 / num2;
            case '*':
                return num1 * num2;
            default:
                throw new IllegalArgumentException("Invalid operator inputted " + operator);

        }

    }

    public void handlingPrints(String string) {
        if (string.startsWith("println")) {

            // take "Name" from println("Name") and remove any whiteSpaces

            String content = string.substring(8, string.length() - 1).trim();

            // removing quotes to have in console printed -> Name instead of -> "Name"

            if (content.startsWith("\"") && content.endsWith("\"")) {
                content = content.substring(1, string.length() - 1);
            }
            System.out.println(content);

        } else if (string.startsWith("print")) {
            //repeating the same as before

            String content = string.substring(6, string.length() - 1).trim();

            if (content.startsWith("\"") && content.endsWith("\"")) {
                content = content.substring(1, content.length() - 1);
            }

            System.out.print(content);

        }

    }
    public void handlingIfStatement(String input){
      if(input.startsWith("if")){
          //basically we check if "if" statement has parenthesis
          int openParenIndex = input.indexOf('(');
          int closeParenIndex = input.indexOf(')');

          if(openParenIndex == -1 || closeParenIndex == -1){
              throw new IllegalArgumentException("The parenthesis are missing");
          }
          // then we extract the statement
          String condition = input.substring(openParenIndex + 1, closeParenIndex).trim();

          //repeating same for curly braces
          int openBraceIndex = input.indexOf('{');
          int closeBraceIndex = input.indexOf('}');

          if(openBraceIndex == -1 || closeBraceIndex == -1){
              throw new IllegalArgumentException("curly braces missing");

          }
          String block = input.substring(openBraceIndex + 1, closeBraceIndex).trim();

          //here we evaluate the if-statement
          boolean conditionResult = evaluateCondition(condition);
         if(conditionResult){
             executeBlock(block);
         }
         

      }

    }

    private void executeBlock(String block) {
         //so here we split the string by semicolon and if line is not empty in block it means we have
        //to evaluate some expression
        String[] lines = block.split(";");
        for(String line : lines){
            line = line.trim();
            if(!line.isEmpty()){
                eval(line);
            }
        }

    }
   //here we evaluate the condition for if/while
    private boolean evaluateCondition(String condition) {

        condition = condition.trim();
        if(condition.equals("true")){
            return true;

        }
        if(condition.equals("false")){
            return false;
        }
    }

}
